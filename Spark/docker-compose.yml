version: "3.4"
services:
  spark-master:
    build:
      context: .
      dockerfile: ./docker/spark/Dockerfile
    ports:
      - "9090:8080"
      - "7077:7077"
    volumes:
      - ./apps_bda:/opt/spark-apps
      - ./data_bda:/opt/spark-data
      - ./generation_bda:/opt/spark-generation
    environment:
      - SPARK_LOCAL_IP=spark-master
      - SPARK_WORKLOAD=master

  spark-worker-a:
    build:
      context: .
      dockerfile: ./docker/spark/Dockerfile
    ports:
      - "9091:8080"
      - "7000:7000"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-a
    volumes:
      - ./apps_bda:/opt/spark-apps
      - ./data_bda:/opt/spark-data
      - ./generation_bda:/opt/spark-generation

  spark-worker-b:
    build:
      context: .
      dockerfile: ./docker/spark/Dockerfile
    ports:
      - "9095:8080"
      - "7001:7000"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-b
    volumes:
      - ./apps_bda:/opt/spark-apps
      - ./data_bda:/opt/spark-data
      - ./generation_bda:/opt/spark-generation

  # OK
  #database:
  #  hostname: my_postgres_service
  #  image: postgres:16.2-alpine
  #  ports:
  #    - "5432:5432"
  #  environment:
  #    - POSTGRES_PASSWORD=casa1234
  #  volumes:
  #    - "postgres:/var/lib/postgresql/data"
  

  # Tiene que funcionar
  database:
    hostname: my_postgres_service
    image: postgres:16.2-alpine
    ports:
      - "9999:5432"
    environment:
      - POSTGRES_PASSWORD=bdaPrimOrd
      - POSTGRES_USER=primOrd
      - POSTGRES_DB=PrimOrd

    volumes:
      - postgres:/var/lib/postgresql/data











# OK  mongodb:
#    image: mongo
#    hostname: mongodb
#    restart: always
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongodb_data:/data/db


# Esta tiene que funcionar
  mongodb:
    image: mongo:4.4
    hostname: mongodb
    environment:
       MONGO_INITDB_ROOT_USERNAME: root
       MONGO_INITDB_ROOT_PASSWORD: secret
       MONGO_INITDB_DATABASE: proyecto
    
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

















  neo4j:
    image: neo4j:5.19
    container_name: neo4j
    environment:
      NEO4J_AUTH: neo4j/your_password
    ports:
      - "7474:7474" 
      - "7687:7687" 
    volumes:
      - neo4j_data:/data

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: alberite
      MYSQL_DATABASE: retail_db
      MYSQL_USER: user1
      MYSQL_PASSWORD: alberite
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql_alternative


  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://kafka:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: "sales_stream:1:1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
  
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"

  localstack:
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559" # external services port range
    environment:
      - DEBUG=${DEBUG:-0}
    volumes:
      - "localstackVolume:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

volumes:
  localstackVolume:
  postgres:
  mongodb_data:
  neo4j_data:
  mysql_data:


